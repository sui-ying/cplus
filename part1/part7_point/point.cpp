#include<iostream>
#include<string>

using namespace std;

// 指针(是一个变量，其值为另一个变量的地址)的定义和使用
int main(){

    //  ******************************************************
    // 1. 定义指针: 数据类型 * 指针变量名
    int a = 1;
    int *p;  // 创建指针
    p = &a;  // 与变量a的地址建立联系
    // int *p = &a;

    cout << "变量a的地址为: " << &a << endl;
    cout << "指针p指向的内存地址为: " << p << endl;
    cout << "指针p为: " << *p << endl;


    // 2. 使用指针: 可以通过 * 操作符， 找到指针指向内存中的数据
    *p =  1000;  // 解引用: 重新对指定内存修改其他值
    cout << "a: " << a << endl;
    cout << "*p: " << *p << endl;
    
    //  ******************************************************
    // 指针所占用的内存空间
    cout << "指针p占用的内存空间: " << sizeof(p) << endl;  // 64位 8字节


    //  ******************************************************
    // 空指针: 用于给指针变量初始化
    int *p1 = NULL;
    cout << "指针p1指向的内存地址为: " << p1 << endl;
    // *p1 = 1000; // 空指针不可以进行访问

    //  ******************************************************
    // 野指针: 程序中避免使用, 不可进行访问
    int *p2 = (int *)0x1100;
    // cout << *p2 << endl;


    // ******************************************************
    // const修饰指针 常量指针: 指向的地址可以修改，但是指向的值不可以修改
    int b = 2000;
    const int *p_const = &a;
    // *p_const = &b; // 不可修改

    // const修饰常量 指针常量: 指针指向不可以修改, 但是值可以修改
    int * const p_1 = &a;
    a = 2000;
    // p_1 = &b;

    // const修饰常量和指针
    const int * const p_2 = &a;
    // p_2 = &b;
    // *p2 = b;

}